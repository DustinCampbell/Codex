
* Generate abstract IndexBehaviors types which will require indicating behavior of indexable fields at compile time
Example:

[Generated]
public interface IDefinitionIndexBehaviors
{	
	public SearchBehavior ShortName { get; }

	public SearchBehavior ContainerQualifiedName { get; }
}

[Generated]
public class DefaultDefinitionIndexBehaviors
{
	// Notice that this is a field to prevent this from implementing the interface
	// because this should be an explicit choice to make this field searchable/stored
	public readonly SearchBehavior ShortName = SearchBehavior.Prefix;

	public readonly SearchBehavior ContainerQualifiedName = SearchBehavior.PrefixFullName;
}

[UserDefined]
public DefinitionIndexBehaviors : IDefinitionIndexBehaviors
{
	public readonly DefaultDefinitionIndexBehaviors Defaults;

	public SearchBehavior ShortName => Defaults.ShortName;

	public SearchBehavior ContainerQualifiedName => Defaults.ContainerQualifiedName;
}

* Cumulative commit filter - a filter which includes all files in the commit and its parent commits transitively

